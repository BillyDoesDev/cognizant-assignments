#!/bin/bash

# === Configuration ===
CONTAINER_NAME="sql-server"
SQLCMD_PATH="/opt/mssql-tools18/bin/sqlcmd"
SQL_SERVER="-S localhost -U sa -P EightCharsLong_069"
DEFAULT_DATABASE="master"

# === Usage info ===
show_help() {
    echo "Usage: $0 [-d database] path/to/file.sql"
    echo
    echo "Options:"
    echo "  -d, --database   Optional target database (default: master)"
    echo "  -h, --help       Show this help message"
    echo
    echo "Example:"
    echo "  $0 ./scripts/init.sql"
    echo "  $0 -d MyDatabase ./migrations/schema.sql"
}

# === Parse args ===
DB_NAME="$DEFAULT_DATABASE"
POSITIONAL=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--database)
            DB_NAME="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL[@]}"

# Check SQL file is provided
if [ -z "$1" ]; then
    echo "Error: Path to .sql file is required."
    show_help
    exit 1
fi

SQL_FILE="$1"

# Validate file exists
if [ ! -f "$SQL_FILE" ]; then
    echo "Error: File not found: $SQL_FILE"
    exit 1
fi

# === Run the SQL file ===
echo "Running $SQL_FILE on database '$DB_NAME' in container '$CONTAINER_NAME'..."

cat "$SQL_FILE" | docker exec -i "$CONTAINER_NAME" "$SQLCMD_PATH" $SQL_SERVER -No -d "$DB_NAME"

exit_code=$?
if [ $exit_code -eq 0 ]; then
    echo "[*] SQL executed successfully."
else
    echo "[*] SQL execution failed (exit code $exit_code)."
fi

exit $exit_code
